/*
Given an array of integers A, find the sum of min(B), where B ranges over every (contiguous) subarray of A.

Since the answer may be large, return the answer modulo 10^9 + 7.

Input: [3,1,2,4]
Output: 17
Explanation: Subarrays are [3], [1], [2], [4], [3,1], [1,2], [2,4], [3,1,2], [1,2,4], [3,1,2,4]. 
Minimums are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1.  Sum is 17.

*/

class Solution {
    public int sumSubarrayMins(int[] A) {
        if (A == null || A.length == 0) return 0;
        int[][] range = new int[A.length][2];
        Stack<Integer> s = new Stack<>();
        s.push(-1);
        for (int i = 0; i < A.length; i++){
            while (s.peek() != -1 && A[i] < A[s.peek()]) s.pop();
            range[i][0] = s.peek() + 1;
            s.push(i);
        }
        
        s.clear();
        s.push(A.length);
        for (int i = A.length - 1; i >= 0; i--){
            while(s.peek() != A.length && A[i] <= A[s.peek()]) s.pop();
            range[i][1] = s.peek() - 1;
            s.push(i);
        }
        
        long sum = 0;
        
        for (int i = 0; i < A.length; i++){
            sum += A[i] * ((i - range[i][0] + 1) * (range[i][1] - i + 1));
        }
        
        return (int)(sum % 1000000007);
    }
}

